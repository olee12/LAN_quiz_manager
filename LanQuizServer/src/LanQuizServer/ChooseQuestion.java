/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LanQuizServer;

import NeededClass.FillInTheBlanks;
import NeededClass.McqQuestion;
import NeededClass.Quiz;
import NeededClass.Student;
import NeededClass.TrueFalse;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Tahmid
 */
public class ChooseQuestion extends javax.swing.JFrame {

    /**
     * constructor . creat a new quiz and student answer sheet , and init() all quiz data for 1st time to null
     */
    public ChooseQuestion() {
        
        CurrentQuiz.setCurrentQuiz(new Quiz());
        CurrentQuiz.getCurrentQuiz().setMcq(null);
        CurrentQuiz.getCurrentQuiz().setFillInTheBlanksQuestion(null);
        CurrentQuiz.getCurrentQuiz().setTrueFalseQuestion(null);
        CurrentQuiz.getCurrentQuiz().setStudentsData(null);
        CurrentQuiz.setAllStudentAnsSheet(new HashMap());
        CurrentQuiz.studentsIP = new HashMap<>();
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mcqButton = new javax.swing.JButton();
        fillInTheBlanksButton = new javax.swing.JButton();
        trueFalseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mcqPathText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fillInTheBlanksPathText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        trueFalsePathText = new javax.swing.JTextField();
        studentDataButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        studentDataPathText = new javax.swing.JTextField();
        startTimeSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        durationSpinner = new javax.swing.JSpinner();
        setQuizButton = new javax.swing.JButton();
        studentDataWithPasswordButton = new javax.swing.JToggleButton();
        studentDataWithPasswordLabel = new javax.swing.JLabel();
        studentDataWithPasswordPathText = new javax.swing.JTextField();
        quizTitelLabel = new javax.swing.JLabel();
        quizTitelText = new javax.swing.JTextField();
        portNumberLabel = new javax.swing.JLabel();
        portNumberTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mcqButton.setText("Set MCQ");
        mcqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcqButtonActionPerformed(evt);
            }
        });

        fillInTheBlanksButton.setText("Set Fill In The Blanks");
        fillInTheBlanksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillInTheBlanksButtonActionPerformed(evt);
            }
        });

        trueFalseButton.setText("Set True False");
        trueFalseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trueFalseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("path");

        jLabel2.setText("path");

        jLabel3.setText("path");

        studentDataButton.setText("Set Student Data and Generate Password For Student");
        studentDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDataButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("path");

        startTimeSpinner.setModel(new javax.swing.SpinnerDateModel());

        jLabel5.setText("Start Time : ");

        jLabel6.setText("Duration :");

        durationSpinner.setModel(new javax.swing.SpinnerNumberModel());

        setQuizButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        setQuizButton.setText("Set Quiz");
        setQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setQuizButtonActionPerformed(evt);
            }
        });

        studentDataWithPasswordButton.setText("Set student Data with Previous  Password");
        studentDataWithPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDataWithPasswordButtonActionPerformed(evt);
            }
        });

        studentDataWithPasswordLabel.setText("path");

        quizTitelLabel.setText("Quiz Titel :");

        portNumberLabel.setText("Port Number :");

        portNumberTextField.setText("12375");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mcqPathText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trueFalsePathText))
                    .addComponent(mcqButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fillInTheBlanksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trueFalseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentDataButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fillInTheBlanksPathText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentDataPathText)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(studentDataWithPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(studentDataWithPasswordPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(studentDataWithPasswordButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(portNumberTextField))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(setQuizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(startTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(durationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(58, 58, 58))))
            .addGroup(layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(quizTitelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quizTitelText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portNumberLabel)
                            .addComponent(portNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(setQuizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quizTitelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quizTitelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(mcqButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcqPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fillInTheBlanksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fillInTheBlanksPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trueFalseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trueFalsePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentDataWithPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(studentDataPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentDataWithPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentDataWithPasswordPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * this method  sets mcq question in the current quiz from the file mcqFile
     * @param mcqFile mcqQuestion file(csv)
     */
    public void setMcqInCurrentQuiz(File mcqFile) {
        Vector<McqQuestion> mcqQuestion = null;
        mcqQuestion = ProcessQuestion.processMcq(mcqFile);

        CurrentQuiz.getCurrentQuiz().setMcq(mcqQuestion);
        if (mcqQuestion != null) {
            mcqPathText.setText(mcqFile.getAbsolutePath());
        }
    }
     /**
     * this method  sets fill in the blanks question in the current quiz from the file fillInTheBlanksFile
     * @param fillInTheBlanksFile fill in the blanks question file(csv)
     */
    public void setFillInTheBlanksInCurrentQuiz(File fillInTheBlanksFile) {
        Vector<FillInTheBlanks> fillInTheBlanksQuestion = null;

        fillInTheBlanksQuestion = ProcessQuestion.processFillInTheBlanks(fillInTheBlanksFile);

        CurrentQuiz.curQuiz.fillInTheBlanksesQuestions = fillInTheBlanksQuestion;
        if (fillInTheBlanksQuestion != null) {
            fillInTheBlanksPathText.setText(fillInTheBlanksFile.getAbsolutePath());
        }
    }
    /**
     * this method  sets true false question in the current quiz from the file trueFalseFile
     * @param trueFalseFile true false question file(csv)
     */
    public void setTrueFalseInCurrentQuiz(File trueFalseFile) {
        Vector<TrueFalse> trueFalseQuestion = null;
        trueFalseQuestion = ProcessQuestion.processTrueFalse(trueFalseFile);

        CurrentQuiz.curQuiz.trueFalseQuestions = trueFalseQuestion;
        if (trueFalseQuestion != null) {
            trueFalsePathText.setText(trueFalseFile.getAbsolutePath());
        }
    }
     /**
     * this method  sets student data with password in the current quiz from the file studentFile
     * @param studentFile student data file with password file(csv)
     */
    public void setStudentDataAndGeneratePasswordInCurrentQuiz(File studentFile) {
        
        Vector<Student> studentData = null;
        studentData = ProcessQuestion.processStudentDataWithoutPassword(studentFile);
        
       
        if (studentData != null) {
             CurrentQuiz.curQuiz.studentData = studentData;
            studentDataPathText.setText(studentFile.getAbsolutePath());
            generatePasswordForStudentData();
        }
    }
    /**
     * this method open a jfilechooser to choose the mcq question csv file when the user press the set mcq question button
     * @param evt button pressing event
     */
    private void mcqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcqButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openMcq = new JFileChooser();
        openMcq.setFileFilter(new FileNameExtensionFilter("Mcq Questions", "csv"));
        openMcq.setAcceptAllFileFilterUsed(false);
        openMcq.setMultiSelectionEnabled(false);
        openMcq.setSelectedFile(new File("McqQuestion.csv"));

        if (openMcq.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setMcqInCurrentQuiz(openMcq.getSelectedFile());
        }

    }//GEN-LAST:event_mcqButtonActionPerformed
     /**
     * this method open a jfilechooser to choose the fill in the blanks question csv file when the user press the set fill in the blanks question button
     * @param evt button pressing event
     */
    private void fillInTheBlanksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillInTheBlanksButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openFillInTheBlanks = new JFileChooser();
        openFillInTheBlanks.setFileFilter(new FileNameExtensionFilter("Fill In The Blanks", "csv"));
        openFillInTheBlanks.setAcceptAllFileFilterUsed(false);
        openFillInTheBlanks.setMultiSelectionEnabled(false);
        openFillInTheBlanks.setSelectedFile(new File("FillInTheBlanksQuestion.csv"));

        if (openFillInTheBlanks.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setFillInTheBlanksInCurrentQuiz(openFillInTheBlanks.getSelectedFile());
        }
    }//GEN-LAST:event_fillInTheBlanksButtonActionPerformed
    
     /**
     * this method open a jfilechooser to choose the true false question csv file when the user press the set true false question button
     * @param evt button pressing event
     */
    private void trueFalseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trueFalseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openTrueFlase = new JFileChooser();
        openTrueFlase.setFileFilter(new FileNameExtensionFilter("True False", "csv"));
        openTrueFlase.setAcceptAllFileFilterUsed(false);
        openTrueFlase.setMultiSelectionEnabled(false);
        openTrueFlase.setSelectedFile(new File("TrueFalseQuestion.csv"));
        if (openTrueFlase.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setTrueFalseInCurrentQuiz(openTrueFlase.getSelectedFile());
        }
    }//GEN-LAST:event_trueFalseButtonActionPerformed
     /**
     * this method open a jfilechooser to choose the student data file(without password) csv file when the user press the set student button question button
     * @param evt button pressing event
     */
    private void studentDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDataButtonActionPerformed
        // TODO add your handling code here:
        
        JFileChooser openStudentData = new JFileChooser();
        openStudentData.setFileFilter(new FileNameExtensionFilter("StudentData", "csv"));
        openStudentData.setAcceptAllFileFilterUsed(false);
        openStudentData.setMultiSelectionEnabled(false);
        openStudentData.setSelectedFile(new File("StudentData.csv"));
        
        if (openStudentData.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setStudentDataAndGeneratePasswordInCurrentQuiz(openStudentData.getSelectedFile());
        }
    }//GEN-LAST:event_studentDataButtonActionPerformed
    /**
     * this method check if every important data has been set for the current quiz
     * @return true if every thing is all right , or false if important data is not given
     */
    public boolean checkEveryThing() {
        if (CurrentQuiz.curQuiz.getMcqQuestion() == null
                && CurrentQuiz.curQuiz.getFillInTheBlanksQuestion() == null
                && CurrentQuiz.curQuiz.getTrueFalseQuestion() == null) {

            JOptionPane.showMessageDialog(this, "Set at least one question category");
            return false;
        }
        if (CurrentQuiz.curQuiz.getStudentsData() == null) {
            JOptionPane.showMessageDialog(this, "Set Student Data");
            return false;
        }
        if(quizTitelText.getText().trim().length() <= 0){
            JOptionPane.showMessageDialog(this, "Please give the Quiz a Titel.");
            return false;
        }else{
            CurrentQuiz.curQuiz.setTitel(quizTitelText.getText().trim());
        }
        
        if(portNumberTextField.getText().trim().length()!=5){
            JOptionPane.showMessageDialog(this, "Please enter a valid port number with length 5");
            return false;
        }else{
            QuizServer.port = Integer.parseInt(portNumberTextField.getText().trim());
        }
        
        return true;
    }
    /**
     * starts the quiz
     */
    public void startQuiz() {
        
        RunningQuiz quiz = new RunningQuiz();
        quiz.parRef = this;
        this.setVisible(false);
        quiz.setVisible(true);
    }
    /**
     * this method try to start the quiz , if every thing is all right then the quiz starts else a error message is shown to the user
     * @param evt button pressing event
     */
    private void setQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setQuizButtonActionPerformed
        // TODO add your handling code here:
        boolean flag = checkEveryThing();
        if (flag == false) {
            return;
        }
        CurrentQuiz.getCurrentQuiz().setStartTime((Date) startTimeSpinner.getValue());
        CurrentQuiz.getCurrentQuiz().setDuration((int) durationSpinner.getValue());
        startQuiz();
    }//GEN-LAST:event_setQuizButtonActionPerformed
    /**
     * this method set student data with password in the current quiz from the file studentDataWithPasswordFile
     * @param studentDataWithPasswordFile student data with password file csv
     */
    private void setStudentDataWithPasswordInCurrentQuiz(File studentDataWithPasswordFile){
        Vector<Student> student = ProcessQuestion.processStudentDataWithPassword(studentDataWithPasswordFile);
        
        if(student==null){
            return;
        }
        else{
            CurrentQuiz.getCurrentQuiz().setStudentsData(student);
            studentDataWithPasswordPathText.setText(studentDataWithPasswordFile.getAbsolutePath());
        }
    }
    
    
      /**
     * this method open a jfilechooser to choose the student data file(with password) csv file when the user press the set student data with button question button
     * @param evt button pressing event
     */
    private void studentDataWithPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDataWithPasswordButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openStudentDataWithPassword = new JFileChooser();
        openStudentDataWithPassword.setFileFilter(new FileNameExtensionFilter("StudentData", "csv"));
        openStudentDataWithPassword.setAcceptAllFileFilterUsed(false);
        openStudentDataWithPassword.setMultiSelectionEnabled(false);
        openStudentDataWithPassword.setSelectedFile(new File("StudentDataWithPassword.csv"));
        
        if(openStudentDataWithPassword.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            setStudentDataWithPasswordInCurrentQuiz(openStudentDataWithPassword.getSelectedFile());
        }
        
    }//GEN-LAST:event_studentDataWithPasswordButtonActionPerformed
    
    /**
     * this method generate password for students and save the student data file with password
     */
    public void generatePasswordForStudentData() {

        class passGenerator {
            private SecureRandom random = new SecureRandom();
            public String nextPassword() {
                return new BigInteger(31, random).toString(26);
            }
        }
        Vector<Student> students = CurrentQuiz.getCurrentQuiz().getStudentsData();
        for(int i = 0;i<students.size();i++){
        passGenerator var = new passGenerator();
        students.get(i).setPassword(var.nextPassword());
        }
        File file = new File(studentDataPathText.getText().trim());
        String curTime = ProcessFinalResult.getCurrentTimeInStringFormated();
        String path = file.getParent() + "\\" + "StudentDataWithPassword"+curTime+".csv";
        ProcessQuestion.makeStudentDataWithPassword(path);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner durationSpinner;
    private javax.swing.JButton fillInTheBlanksButton;
    private javax.swing.JTextField fillInTheBlanksPathText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton mcqButton;
    private javax.swing.JTextField mcqPathText;
    private javax.swing.JLabel portNumberLabel;
    private javax.swing.JTextField portNumberTextField;
    private javax.swing.JLabel quizTitelLabel;
    private javax.swing.JTextField quizTitelText;
    private javax.swing.JButton setQuizButton;
    private javax.swing.JSpinner startTimeSpinner;
    private javax.swing.JButton studentDataButton;
    private javax.swing.JTextField studentDataPathText;
    private javax.swing.JToggleButton studentDataWithPasswordButton;
    private javax.swing.JLabel studentDataWithPasswordLabel;
    private javax.swing.JTextField studentDataWithPasswordPathText;
    private javax.swing.JButton trueFalseButton;
    private javax.swing.JTextField trueFalsePathText;
    // End of variables declaration//GEN-END:variables
}
