/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LanQuizServer;

import NeededClass.Student;
import NeededClass.StudentAnswer;
import java.io.IOException;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.awt.Desktop;
import java.io.File;
import java.io.OutputStream;
import java.util.logging.ConsoleHandler;
import java.util.logging.Formatter;
import java.util.logging.MemoryHandler;
import java.util.logging.StreamHandler;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;

/**
 * this class keep track of every thing when the quiz is running
 *
 * @author Tahmid
 */
public class RunningQuiz extends javax.swing.JFrame {

    
    boolean quizFinished = false;
    public final Timer timer;
    public ChooseQuestion parRef;
    public RunningQuiz() {

        initComponents();
        timer = new Timer();
        init();
    }

    /**
     * this method initialize various label and starts a timer to control the
     * time label , and ask the server to satr initialize the quiz status box
     * and student data table
     */
    public void init() {
        quizTitelLabel.setText(CurrentQuiz.curQuiz.getTitel());
        startTimeLabel.setText((String) ("Start Time : " + CurrentQuiz.curQuiz.getStartTime()));
        durationLabel.setText((String) ("Duration : " + CurrentQuiz.curQuiz.getDuration()));

        TimerTask task = new TimerTask() { ///A time task for controlling the time label

            @Override
            public void run() {
                setTimeLabel();
            }
        };
        QuizStatus.setStatusBox(statusBox);
        QuizStatus.SetStudentTable(studentStatusTable);

        setStudentStatusTabel();
        makeStudentAnswerSheetReady();
        timer.scheduleAtFixedRate(task, 0, 300);
        try {
            QuizServer.readyServer();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while making the server : " + e + "\n" + "Please try again");
            return;
        }
    }

    /**
     * this method makes the student answer sheet ready
     */
    public void makeStudentAnswerSheetReady() {
        for (Student st : CurrentQuiz.curQuiz.getStudentsData()) {
            CurrentQuiz.allStudentAnsSheet.put(st.getStudentRegNo(), new StudentAnswer());
        }
    }

    /**
     * this method initialize the student status table
     */
    public void setStudentStatusTabel() {
        DefaultTableModel model = (DefaultTableModel) studentStatusTable.getModel();
        model.setRowCount(0);
        String ara[] = {"ID", "Name", "Registration No", "password", "Status", "Login Time", "Correct Ans", "Wrong Ans", "Logout time"};
        for (Student st : CurrentQuiz.curQuiz.studentData) {
            model.addRow(new Object[]{st.getID(), st.getStudentName(), st.getStudentRegNo(), st.getPassword(), "Absent", "N/A", "N/A", "N/A", "N/A"});
        }
    }

    /**
     * This method is for controlling the time label;
     */
    public void setTimeLabel() {
        long now = System.currentTimeMillis();
        long startTime = CurrentQuiz.curQuiz.getStartTime().getTime();
        long endTime = startTime + CurrentQuiz.curQuiz.duration * 60000;

        if (startTime > now) {
            if (startTime <= (now + 60000 * 3)) {
                startQuizButton.setEnabled(false);
            }

            long remain = startTime - now;
            remain /= 1000;

            long min = remain / 60;
            long sec = remain % 60;
            remainingTimeLabel.setText("Quiz sarts in " + min + " minute " + sec + " seconds");

        } else if (endTime < now) {
            remainingTimeLabel.setText("Quiz Finished");
            quizFinished = true;
            timer.cancel();
        } else {
            if (now > (endTime - 5 * 60 * 1000)) {
                durationIncreaseButton.setEnabled(false);
            }
            startQuizButton.setEnabled(false);
            long remain = endTime - now;
            remain /= 1000;
            long min = remain / 60;
            long sec = remain % 60;
            remainingTimeLabel.setText("Quiz ends in " + min + " minutes " + sec + " second ");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusBox = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentStatusTable = new javax.swing.JTable();
        remainingTimeLabel = new javax.swing.JLabel();
        quizTitelLabel = new javax.swing.JLabel();
        saveFinalStatusButton = new javax.swing.JButton();
        durationIncreaseButton = new javax.swing.JButton();
        startTimeLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        startQuizButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusBox.setColumns(20);
        statusBox.setRows(5);
        jScrollPane1.setViewportView(statusBox);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Status", jPanel1);

        studentStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Registration No", "Password", "Status", "Login Time", "Correct Ans", "Wrong Ans", "Logout Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(studentStatusTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Student Info", jPanel2);

        remainingTimeLabel.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        remainingTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        remainingTimeLabel.setText("Quiz starts in x minute");

        quizTitelLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        quizTitelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quizTitelLabel.setText("Quiz Titel");

        saveFinalStatusButton.setText("Save Final Status");
        saveFinalStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFinalStatusButtonActionPerformed(evt);
            }
        });

        durationIncreaseButton.setText("Increase the quiz time by 5 minute");
        durationIncreaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationIncreaseButtonActionPerformed(evt);
            }
        });

        startTimeLabel.setText("Start Time :");

        durationLabel.setText("Duration: ");

        startQuizButton.setText("Start quiz in 3 Minute");
        startQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startQuizButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(quizTitelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(143, 143, 143)
                                .addComponent(remainingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveFinalStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startQuizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(durationIncreaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quizTitelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remainingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startQuizButton)
                    .addComponent(durationIncreaseButton)
                    .addComponent(saveFinalStatusButton))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed
    /**
     * making sure everything when the window is closing
     * @param evt WindowClosing event
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        int flag = JOptionPane.showConfirmDialog(this, "Are you sure to exit Quiz Server app . Please be sure to save the Final result"); /// making sure that the user want to close the window

        if (flag == JOptionPane.YES_OPTION) {
            if (quizFinished == false) {
                int v1 = JOptionPane.showConfirmDialog(this, "Quiz is still running . Are you sure to exit.");
                if (v1 == JOptionPane.YES_OPTION) {
                    this.dispose();
                    parRef.setVisible(true);
                } else {
                    return;
                }
            }

            this.dispose();

        } else {
            return;
        }
    }//GEN-LAST:event_formWindowClosing
    /**
     * save the final result 
     * @param evt saveFinalStatusButton pressed event
     */
    private void saveFinalStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFinalStatusButtonActionPerformed
        // TODO add your handling code here:
        ProcessFinalResult.processFinalStatus();
    }//GEN-LAST:event_saveFinalStatusButtonActionPerformed
    /**
     * Increse the quiz time by 5 minute (befor the last 5 minute )
     * @param evt saveFinalStatusButton pressed event
     */
    private void durationIncreaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationIncreaseButtonActionPerformed
        // TODO add your handling code here:
        int cur_duration = CurrentQuiz.curQuiz.getDuration();
        CurrentQuiz.curQuiz.setDuration(cur_duration + 5);
        durationLabel.setText((String) ("Duration : " + CurrentQuiz.curQuiz.getDuration()));
    }//GEN-LAST:event_durationIncreaseButtonActionPerformed
    /**
     * starts the quiz in three minute
     * @param evt startQuizButton pressed event
     */
    private void startQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startQuizButtonActionPerformed
        // TODO add your handling code here:
        CurrentQuiz.curQuiz.setStartTime(new Date(System.currentTimeMillis() + 60000 * 3));
        startQuizButton.setEnabled(false);
        startTimeLabel.setText("Start Time : " + CurrentQuiz.curQuiz.getStartTime());

    }//GEN-LAST:event_startQuizButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton durationIncreaseButton;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel quizTitelLabel;
    private javax.swing.JLabel remainingTimeLabel;
    private javax.swing.JButton saveFinalStatusButton;
    private javax.swing.JButton startQuizButton;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JTextArea statusBox;
    private javax.swing.JTable studentStatusTable;
    // End of variables declaration//GEN-END:variables
}
